/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.bbte.projectbluebook.datacatalog.assets.api;

import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetCreationRequest;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetResponse;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetUpdateRequest;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Asset", description = "the Asset API")
public interface AssetApi {

    /**
     * POST /assets/{assetId}/tags/{tag} : Add tag to asset
     * Adds the tag to the asset which ID corresponds to the ID provided.  A status code of &#x60;204&#x60; with an empty body indicates that the operation was successful. If the tag is already present, it will not be added again, and a status code of &#x60;204&#x60; will be returned.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The ID of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Add tag to asset", nickname = "addTag", notes = "Adds the tag to the asset which ID corresponds to the ID provided.  A status code of `204` with an empty body indicates that the operation was successful. If the tag is already present, it will not be added again, and a status code of `204` will be returned.", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> addTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The ID of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /assets : Create an asset
     * Create an asset. The user must be authenticated to be able to create an asset.  Curently supported source locations are:   - URL  - Azure Blob Storage.    Currently supported data formats are:  - JSON  - CSV
     *
     * @param assetCreationRequest The asset to be created. (optional)
     * @return Created (status code 201)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "Create an asset", nickname = "createAsset", notes = "Create an asset. The user must be authenticated to be able to create an asset.  Curently supported source locations are:   - URL  - Azure Blob Storage.    Currently supported data formats are:  - JSON  - CSV", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> createAsset(@ApiParam(value = "The asset to be created."  )  @Valid @RequestBody(required = false) Mono<AssetCreationRequest> assetCreationRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /assets/{assetId} : Delete asset by ID
     * Delete the asset which ID corresponds to the ID provided.  Requires authentication and correct access rights to perform the deletion.  A response with status code of &#x60;204&#x60; with empty resonse body indicates that the deletion was successful.
     *
     * @param assetId The ID of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete asset by ID", nickname = "deleteAsset", notes = "Delete the asset which ID corresponds to the ID provided.  Requires authentication and correct access rights to perform the deletion.  A response with status code of `204` with empty resonse body indicates that the deletion was successful.", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void>> deleteAsset(@ApiParam(value = "The ID of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /assets/{assetId}/tags/{tag} : Delete tag from asset
     * Deletes the tag from the asset which ID corresponds to the ID provided.  A status code of &#x60;204&#x60; with an empty body indicates that the operation was successful. If the tag was not present in the first place, a status code of &#x60;204&#x60; will be returned.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The ID of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete tag from asset", nickname = "deleteTag", notes = "Deletes the tag from the asset which ID corresponds to the ID provided.  A status code of `204` with an empty body indicates that the operation was successful. If the tag was not present in the first place, a status code of `204` will be returned.", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void>> deleteTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The ID of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /assets/{assetId} : Get asset by ID
     * Returns the asset which ID corresponds to the ID provided.  If the asset is not public, it requires authentication, and correct access rights to be able to retrieve the asset.
     *
     * @param assetId The ID of the asset. (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Get asset by ID", nickname = "getAsset", notes = "Returns the asset which ID corresponds to the ID provided.  If the asset is not public, it requires authentication, and correct access rights to be able to retrieve the asset.", response = AssetResponse.class, authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<AssetResponse>> getAsset(@ApiParam(value = "The ID of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"members\" : [ \"members\", \"members\" ], \"name\" : \"name\", \"format\" : \"csv\", \"description\" : \"description\", \"isPublic\" : true, \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"tags\" : [ \"tags\", \"tags\" ] }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /assets : Get all assets
     * Lists all the assets available to the authenticated user:  - if no authentication is present, only public assets will be returned. - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get all assets", nickname = "getAssets", notes = "Lists all the assets available to the authenticated user:  - if no authentication is present, only public assets will be returned. - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned.", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> getAssets(ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"members\" : [ \"members\", \"members\" ], \"name\" : \"name\", \"format\" : \"csv\", \"description\" : \"description\", \"isPublic\" : true, \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"tags\" : [ \"tags\", \"tags\" ] }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /user/assets : Get assets owned by the authenticated user
     * Lists all the assets owned by the authenticated user.  Requires authentication to be able to perform the request.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get assets owned by the authenticated user", nickname = "getUserAssets", notes = "Lists all the assets owned by the authenticated user.  Requires authentication to be able to perform the request.", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/user/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> getUserAssets(ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"members\" : [ \"members\", \"members\" ], \"name\" : \"name\", \"format\" : \"csv\", \"description\" : \"description\", \"isPublic\" : true, \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"tags\" : [ \"tags\", \"tags\" ] }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PATCH /assets/{assetId} : Update asset by ID
     * Update the asset which ID corresponds to the ID provided.  Only the attributes specified in the HTTP body will be modified. The attributes which are not specified will **not** change.  Requires authentication and correct access rights to be able to update the asset.  Possible response codes:  - &#x60;204&#x60;: The update was successful.  - &#x60;404&#x60;: There is no asset found with the provided ID.  - &#x60;422&#x60;: The object provided in the request body is malformed. A detailed explanation can be found in the response body. The asset will not be updated.
     *
     * @param assetId The ID of the asset. (required)
     * @param assetUpdateRequest  (optional)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "Update asset by ID", nickname = "patchAsset", notes = "Update the asset which ID corresponds to the ID provided.  Only the attributes specified in the HTTP body will be modified. The attributes which are not specified will **not** change.  Requires authentication and correct access rights to be able to update the asset.  Possible response codes:  - `204`: The update was successful.  - `404`: There is no asset found with the provided ID.  - `422`: The object provided in the request body is malformed. A detailed explanation can be found in the response body. The asset will not be updated.", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default Mono<ResponseEntity<Void>> patchAsset(@ApiParam(value = "The ID of the asset.",required=true) @PathVariable("assetId") String assetId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<AssetUpdateRequest> assetUpdateRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /assets/search/{keyword} : Search assets by keyword
     * List the assets which names contain the given keyword and other search criteria:  - if the ownerId is defined, only assets which are owned by the user with the specified ID are returned.   - if tags are defined, only assets which contain at least one of the specified tags will be returned.    Authentication:  - if no authentication is present, only public assets will be returned. - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned. 
     *
     * @param keyword The keyword to search by. It searches in the name of the asset. (required)
     * @param tags Filter by tags. (optional, default to new ArrayList&lt;&gt;())
     * @param owner Filter by owner. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Search assets by keyword", nickname = "searchAssets", notes = "List the assets which names contain the given keyword and other search criteria:  - if the ownerId is defined, only assets which are owned by the user with the specified ID are returned.   - if tags are defined, only assets which contain at least one of the specified tags will be returned.    Authentication:  - if no authentication is present, only public assets will be returned. - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned. ", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKey"),
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets/search/{keyword}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> searchAssets(@ApiParam(value = "The keyword to search by. It searches in the name of the asset.",required=true) @PathVariable("keyword") String keyword,@ApiParam(value = "Filter by tags.") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "Filter by owner.") @Valid @RequestParam(value = "owner", required = false) String owner, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"members\" : [ \"members\", \"members\" ], \"name\" : \"name\", \"format\" : \"csv\", \"description\" : \"description\", \"isPublic\" : true, \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"tags\" : [ \"tags\", \"tags\" ] }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
