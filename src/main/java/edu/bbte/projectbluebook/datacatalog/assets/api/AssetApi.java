/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.bbte.projectbluebook.datacatalog.assets.api;

import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetCreationRequest;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetResponse;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.AssetUpdateRequest;
import edu.bbte.projectbluebook.datacatalog.assets.model.dto.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Asset", description = "the Asset API")
public interface AssetApi {

    /**
     * POST /assets/favorites/{assetId} : Add asset to favorites
     * Adds the asset to the currently logged in user&#39;s favorites. Responds with &#x60;404&#x60; if the asset is not found.
     *
     * @param assetId The id of the asset to add to the favorites. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Add asset to favorites", nickname = "addFavoriteAsset", notes = "Adds the asset to the currently logged in user's favorites. Responds with `404` if the asset is not found.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/favorites/{assetId}",
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> addFavoriteAsset(@ApiParam(value = "The id of the asset to add to the favorites.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /assets/{assetId}/tags/{tag} : Add tag to asset
     * Adds the tag to the given asset. If the tag is already present, it will remain the same, and &#x60;200&#x60; status will be returned.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The unique identifier of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Add tag to asset", nickname = "addTag", notes = "Adds the tag to the given asset. If the tag is already present, it will remain the same, and `200` status will be returned.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> addTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The unique identifier of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /assets : Create an asset
     * Create a data asset.
     *
     * @param assetCreationRequest The data asset to be created. (optional)
     * @return Created (status code 201)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "Create an asset", nickname = "createAsset", notes = "Create a data asset.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> createAsset(@ApiParam(value = "The data asset to be created."  )  @Valid @RequestBody(required = false) Mono<AssetCreationRequest> assetCreationRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /assets/{assetId} : Delete asset by ID
     * Delete asset.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @return Asset was deleted successfully. (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete asset by ID", nickname = "deleteAsset", notes = "Delete asset.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Asset was deleted successfully."),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void>> deleteAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /assets/{assetId}/tags/{tag} : Delete tag from asset
     * Delete the specified tag from the asset.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The unique identifier of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete tag from asset", nickname = "deleteTag", notes = "Delete the specified tag from the asset.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void>> deleteTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The unique identifier of the asset.",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /assets/{assetId} : Get asset by ID
     * Get asset by ID.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Get asset by ID", nickname = "getAsset", notes = "Get asset by ID.", response = AssetResponse.class, authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<AssetResponse>> getAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"format\" : \"csv\", \"description\" : \"This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"tags\" : [ \"multivariate\", \"multivariate\" ], \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"public\" : true, \"members\" : [ \"members\", \"members\" ], \"name\" : \"Iris Dataset\", \"namespace\" : \"flowerproject\", \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /assets : Get all assets
     * List all the data assets. &#x60;tags&#x60; and &#x60;namespace&#x60; query params are deprecated, please use the &#x60;/assets/search&#x60; endpoint instead.
     *
     * @param tags Filter by tags. (optional, default to new ArrayList&lt;&gt;())
     * @param namespace Filter by namespace. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get all assets", nickname = "getAssets", notes = "List all the data assets. `tags` and `namespace` query params are deprecated, please use the `/assets/search` endpoint instead.", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> getAssets(@ApiParam(value = "Filter by tags.") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "Filter by namespace.") @Valid @RequestParam(value = "namespace", required = false) String namespace, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"format\" : \"csv\", \"description\" : \"This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"tags\" : [ \"multivariate\", \"multivariate\" ], \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"public\" : true, \"members\" : [ \"members\", \"members\" ], \"name\" : \"Iris Dataset\", \"namespace\" : \"flowerproject\", \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /assets/favorites : List favorite assets
     * Lists the favorite assets of the currently logged in user.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "List favorite assets", nickname = "getFavoriteAssets", notes = "Lists the favorite assets of the currently logged in user.", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets/favorites",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> getFavoriteAssets(ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"format\" : \"csv\", \"description\" : \"This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"tags\" : [ \"multivariate\", \"multivariate\" ], \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"public\" : true, \"members\" : [ \"members\", \"members\" ], \"name\" : \"Iris Dataset\", \"namespace\" : \"flowerproject\", \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /user/assets : Your GET endpoint
     * Returns a list of assets which is owned by the logged in user, or is a member of the asset.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Your GET endpoint", nickname = "getUserAssets", notes = "Returns a list of assets which is owned by the logged in user, or is a member of the asset.", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/user/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> getUserAssets(ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"format\" : \"csv\", \"description\" : \"This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"tags\" : [ \"multivariate\", \"multivariate\" ], \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"public\" : true, \"members\" : [ \"members\", \"members\" ], \"name\" : \"Iris Dataset\", \"namespace\" : \"flowerproject\", \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PATCH /assets/{assetId} : Update asset by ID
     * Update only the given attributes of the asset. The attributes which are not specified in the body will not change.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @param assetUpdateRequest Specify only the attributes which you want to update. (optional)
     * @return Changes were made successfully. (status code 204)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "Update asset by ID", nickname = "patchAsset", notes = "Update only the given attributes of the asset. The attributes which are not specified in the body will not change.", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Changes were made successfully."),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default Mono<ResponseEntity<Void>> patchAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId,@ApiParam(value = "Specify only the attributes which you want to update."  )  @Valid @RequestBody(required = false) Mono<AssetUpdateRequest> assetUpdateRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /assets/search/{keyword} : Search assets
     * List the assets which match the given keyword and optional query parameters. 
     *
     * @param keyword The keyword to search by. It searches in the name of the asset. (required)
     * @param tags Filter by tags. (optional, default to new ArrayList&lt;&gt;())
     * @param namespace Filter by namespace. (optional)
     * @param owner Filter by owner. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Search assets", nickname = "searchAssets", notes = "List the assets which match the given keyword and optional query parameters. ", response = AssetResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets/search/{keyword}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<AssetResponse>>> searchAssets(@ApiParam(value = "The keyword to search by. It searches in the name of the asset.",required=true) @PathVariable("keyword") String keyword,@ApiParam(value = "Filter by tags.") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "Filter by namespace.") @Valid @RequestParam(value = "namespace", required = false) String namespace,@ApiParam(value = "Filter by owner.") @Valid @RequestParam(value = "owner", required = false) String owner, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"format\" : \"csv\", \"description\" : \"This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\", \"shortDescription\" : \"This is perhaps the best known database to be found in the pattern recognition literature.\", \"ownerId\" : \"ownerId\", \"tags\" : [ \"multivariate\", \"multivariate\" ], \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"public\" : true, \"members\" : [ \"members\", \"members\" ], \"name\" : \"Iris Dataset\", \"namespace\" : \"flowerproject\", \"location\" : { \"type\" : \"url\", \"parameters\" : [ { \"value\" : \"read$list\", \"key\" : \"permissions\" }, { \"value\" : \"read$list\", \"key\" : \"permissions\" } ] }, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
