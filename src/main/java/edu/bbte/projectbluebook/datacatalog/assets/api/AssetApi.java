/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.bbte.projectbluebook.datacatalog.assets.api;

import edu.bbte.projectbluebook.datacatalog.assets.model.AssetRequest;
import edu.bbte.projectbluebook.datacatalog.assets.model.AssetResponse;
import edu.bbte.projectbluebook.datacatalog.assets.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Asset", description = "the Asset API")
public interface AssetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /assets/{assetId}/tags/{tag}
     * The name of the tag to add.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The unique identifier of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "addTag", notes = "The name of the tag to add.", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.POST)
    default ResponseEntity<Void> addTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The unique identifier of the asset.",required=true) @PathVariable("assetId") String assetId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /assets
     * Create a data asset.
     *
     * @param assetRequest The data asset to be created. (optional)
     * @return Created (status code 201)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "", nickname = "createAsset", notes = "Create a data asset.", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createAsset(@ApiParam(value = "The data asset to be created."  )  @Valid @RequestBody(required = false) AssetRequest assetRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /assets/{assetId}
     * Delete asset.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @return Asset was deleted successfully. (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "deleteAsset", notes = "Delete asset.", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Asset was deleted successfully."),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /assets/{assetId}/tags/{tag}
     * Delete the specified tag from the asset.
     *
     * @param tag The name of the tag. (required)
     * @param assetId The unique identifier of the asset. (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "deleteTag", notes = "Delete the specified tag from the asset.", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}/tags/{tag}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTag(@Size(min=1) @ApiParam(value = "The name of the tag.",required=true) @PathVariable("tag") String tag,@ApiParam(value = "The unique identifier of the asset.",required=true) @PathVariable("assetId") String assetId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /assets/{assetId} : Your GET endpoint
     * Get asset by ID.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Your GET endpoint", nickname = "getAsset", notes = "Get asset by ID.", response = AssetResponse.class, tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AssetResponse> getAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /assets : Your GET endpoint
     * List all the data assets. &#x60;tags&#x60; and &#x60;namespace&#x60; query params are deprecated, please use the &#x60;/assets/search&#x60; endpoint instead.
     *
     * @param tags Filter by tags. (optional, default to new ArrayList&lt;&gt;())
     * @param namespace Filter by namespace. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Your GET endpoint", nickname = "getAssets", notes = "List all the data assets. `tags` and `namespace` query params are deprecated, please use the `/assets/search` endpoint instead.", response = AssetResponse.class, responseContainer = "List", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AssetResponse>> getAssets(@ApiParam(value = "Filter by tags.") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "Filter by namespace.") @Valid @RequestParam(value = "namespace", required = false) String namespace) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /assets/{assetId}
     * Update only the given attributes of the asset. The attributes which are not specified in the body will not change.
     *
     * @param assetId The unique identifier of the asset.  (required)
     * @param assetRequest Specify only the attributes which you want to update. (optional)
     * @return Changes were made successfully. (status code 204)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @ApiOperation(value = "", nickname = "patchAsset", notes = "Update only the given attributes of the asset. The attributes which are not specified in the body will not change.", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Changes were made successfully."),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = ErrorResponse.class) })
    @RequestMapping(value = "/assets/{assetId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> patchAsset(@ApiParam(value = "The unique identifier of the asset. ",required=true) @PathVariable("assetId") String assetId,@ApiParam(value = "Specify only the attributes which you want to update."  )  @Valid @RequestBody(required = false) AssetRequest assetRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /assets/search/{keyword} : Your GET endpoint
     * List the assets which match the given keyword and optional query parameters. 
     *
     * @param keyword The keyword to search by. It searches in the name of the asset. (required)
     * @param tags Filter by tags. (optional, default to new ArrayList&lt;&gt;())
     * @param namespace Filter by namespace. (optional)
     * @param owner Filter by owner. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Your GET endpoint", nickname = "searchAssets", notes = "List the assets which match the given keyword and optional query parameters. ", response = AssetResponse.class, responseContainer = "List", tags={ "Asset", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AssetResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/assets/search/{keyword}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AssetResponse>> searchAssets(@ApiParam(value = "The keyword to search by. It searches in the name of the asset.",required=true) @PathVariable("keyword") String keyword,@ApiParam(value = "Filter by tags.") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "Filter by namespace.") @Valid @RequestParam(value = "namespace", required = false) String namespace,@ApiParam(value = "Filter by owner.") @Valid @RequestParam(value = "owner", required = false) String owner) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
